# docker compose --file ci.compose.yml up --build
x-comment: |
  This compose file is a ci pipeline

services:

  # Build the Golang MCP server and copy the binary to a volume
  generate-binary:
    build:
      context: .
      dockerfile_inline: |
        FROM golang:1.24.2-alpine
        WORKDIR /app
        COPY . .
    volumes:
      - go-binaries:/binaries
    #working_dir: /app
    command:
      - /bin/sh
      - -c
      - |
        go mod tidy
        go build
        mkdir -p /binaries
        mv sea-flea /binaries/
        echo "游릭 Go binary copied to volume successfully"

  tools-list:
    image: golang:1.24.2-alpine
    volumes:
      - go-binaries:/binaries
    command:
      - /bin/sh
      - -c
      - |
        apk add --no-cache jq
        cd /binaries

        cat > mcp_test_tools_list.jsonl << 'EOF'
        {
            "jsonrpc": "2.0", 
            "id": 0, 
            "method": "initialize", 
            "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test", "version": "1.0.0"}}
        }
        {
            "jsonrpc": "2.0", 
            "method": "notifications/initialized"
        }
        {
            "jsonrpc": "2.0", 
            "id": 2, 
            "method": "tools/list", 
            "params": {}
        }
        EOF
        cat mcp_test_tools_list.jsonl | ./sea-flea | jq -c '.' | jq -s '.'
        if [ $? -eq 0 ]; then
          echo "游릭 Test passed successfully"
        else
          echo "游댮 Test failed"
        fi

    depends_on:
      generate-binary:
        condition: service_completed_successfully

  tools-call:
    image: golang:1.24.2-alpine
    volumes:
      - go-binaries:/binaries
    command:
      - /bin/sh
      - -c
      - |
        apk add --no-cache jq
        cd /binaries

        cat > mcp_test_tools_call.jsonl << 'EOF'
        {
            "jsonrpc": "2.0", 
            "id": 0, 
            "method": "initialize", "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test", "version": "1.0.0"}}
        }
        {
            "jsonrpc": "2.0", 
            "method": "notifications/initialized"
        }
        {
            "jsonrpc": "2.0", 
            "id": 2, 
            "method": "tools/call", "params": {
                "name": "hello", 
                "arguments": {"firstName": "Bob", "lastName": "Morane"}
            }
        }
        EOF
        cat mcp_test_tools_call.jsonl | ./sea-flea | jq -c '.' | jq -s '.'
        if [ $? -eq 0 ]; then
          echo "游릭 Test passed successfully"
        else
          echo "游댮 Test failed"
        fi

    depends_on:
      generate-binary:
        condition: service_completed_successfully


  resources-list:
    image: golang:1.24.2-alpine
    volumes:
      - go-binaries:/binaries
    command:
      - /bin/sh
      - -c
      - |
        apk add --no-cache jq
        cd /binaries

        cat > mcp_test_resources_list.jsonl << 'EOF'
        {
            "jsonrpc": "2.0", 
            "id": 0, 
            "method": "initialize", 
            "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test", "version": "1.0.0"}}
        }
        {
            "jsonrpc": "2.0", 
            "method": "notifications/initialized"
        }
        {
            "jsonrpc": "2.0", 
            "id": 2, 
            "method": "resources/list", 
            "params": {}
        }
        EOF
        cat mcp_test_resources_list.jsonl | ./sea-flea | jq -c '.' | jq -s '.'
        if [ $? -eq 0 ]; then
          echo "游릭 Test passed successfully"
        else
          echo "游댮 Test failed"
        fi

    depends_on:
      generate-binary:
        condition: service_completed_successfully


  resources-read:
    image: golang:1.24.2-alpine
    volumes:
      - go-binaries:/binaries
    command:
      - /bin/sh
      - -c
      - |
        apk add --no-cache jq
        cd /binaries

        cat > mcp_test_resources_read.jsonl << 'EOF'
        {
            "jsonrpc": "2.0", 
            "id": 0, 
            "method": "initialize", 
            "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test", "version": "1.0.0"}}
        }
        {
            "jsonrpc": "2.0", 
            "method": "notifications/initialized"
        }
        {
            "jsonrpc": "2.0", 
            "id": 2, 
            "method": "resources/read", 
            "params": {
                "uri": "message:///information"
            }
        }
        EOF
        cat mcp_test_resources_read.jsonl | ./sea-flea | jq -c '.' | jq -s '.'
        if [ $? -eq 0 ]; then
          echo "游릭 Test passed successfully"
        else
          echo "游댮 Test failed"
        fi

    depends_on:
      generate-binary:
        condition: service_completed_successfully

  prompts-list:
    image: golang:1.24.2-alpine
    volumes:
      - go-binaries:/binaries
    command:
      - /bin/sh
      - -c
      - |
        apk add --no-cache jq
        cd /binaries

        cat > mcp_test_prompts_list.jsonl << 'EOF'
        {
            "jsonrpc": "2.0", 
            "id": 0, 
            "method": "initialize", 
            "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test", "version": "1.0.0"}}
        }
        {
            "jsonrpc": "2.0", 
            "method": "notifications/initialized"
        }
        {
            "jsonrpc": "2.0", 
            "id": 2, 
            "method": "prompts/list", 
            "params": {}
        }
        EOF
        cat mcp_test_prompts_list.jsonl | ./sea-flea | jq -c '.' | jq -s '.'
        if [ $? -eq 0 ]; then
          echo "游릭 Test passed successfully"
        else
          echo "游댮 Test failed"
        fi

    depends_on:
      generate-binary:
        condition: service_completed_successfully


  prompts-get:
    image: golang:1.24.2-alpine
    volumes:
      - go-binaries:/binaries
    command:
      - /bin/sh
      - -c
      - |
        apk add --no-cache jq
        cd /binaries

        cat > mcp_test_prompts_get.jsonl << 'EOF'
        {
            "jsonrpc": "2.0", 
            "id": 0, 
            "method": "initialize", 
            "params": {"protocolVersion": "2024-11-05", "capabilities": {}, "clientInfo": {"name": "test", "version": "1.0.0"}}
        }
        {
            "jsonrpc": "2.0", 
            "method": "notifications/initialized"
        }
        {
            "jsonrpc": "2.0", 
            "id": 2, 
            "method": "prompts/get", 
            "params": {
                "name": "basic_prompt",
                "arguments": {
                    "message": "Hello, World!"
                }
            }
        }
        EOF
        cat mcp_test_prompts_get.jsonl | ./sea-flea | jq -c '.' | jq -s '.'
        if [ $? -eq 0 ]; then
          echo "游릭 Test passed successfully"
        else
          echo "游댮 Test failed"
        fi

    depends_on:
      generate-binary:
        condition: service_completed_successfully


  build-mcp-server-image:
    image: mcp-sea-flea:demo
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      tools-list:
        condition: service_completed_successfully
      tools-call:
        condition: service_completed_successfully
      resources-list:
        condition: service_completed_successfully
      resources-read:
        condition: service_completed_successfully
      prompts-list:
        condition: service_completed_successfully
      prompts-get:
        condition: service_completed_successfully
        
volumes:
  go-binaries:
    name: go-binaries
